{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/archived-incidents/archived-incidents.component.css","webpack:///./src/app/archived-incidents/archived-incidents.component.html","webpack:///./src/app/archived-incidents/archived-incidents.component.ts","webpack:///./src/app/common/applicant.ts","webpack:///./src/app/common/dataService.ts","webpack:///./src/app/common/incident.ts","webpack:///./src/app/create-incident/create-incident.component.css","webpack:///./src/app/create-incident/create-incident.component.html","webpack:///./src/app/create-incident/create-incident.component.ts","webpack:///./src/app/create-teams/create-teams.component.css","webpack:///./src/app/create-teams/create-teams.component.html","webpack:///./src/app/create-teams/create-teams.component.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/review-application/review-application.component.css","webpack:///./src/app/review-application/review-application.component.html","webpack:///./src/app/review-application/review-application.component.ts","webpack:///./src/app/team1-details/team1-details.component.css","webpack:///./src/app/team1-details/team1-details.component.html","webpack:///./src/app/team1-details/team1-details.component.ts","webpack:///./src/app/teams/teams.component.css","webpack:///./src/app/teams/teams.component.html","webpack:///./src/app/teams/teams.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","// Assigned to Kishan\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CreateIncidentComponent } from './create-incident/create-incident.component';\r\nimport { CreateTeamsComponent } from './create-teams/create-teams.component';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ReviewApplicationComponent } from './review-application/review-application.component';\r\nimport { TeamsComponent } from './teams/teams.component';\r\nimport { Team1DetailsComponent } from './team1-details/team1-details.component';\r\nimport { ArchivedIncidentsComponent } from './archived-incidents/archived-incidents.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'createIncident', component: CreateIncidentComponent },\r\n  { path: 'createTeams', component: CreateTeamsComponent },\r\n  { path: 'dashboard', component: DashboardComponent },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'reviewApplication', component: ReviewApplicationComponent },\r\n  { path: 'teams', component: TeamsComponent },\r\n  { path: 'team1Details', component: Team1DetailsComponent },\r\n  { path: 'archivedIncidents', component: ArchivedIncidentsComponent },\r\n  { path: '', redirectTo: '/login', pathMatch: 'full'}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","module.exports = \"\"","module.exports = \"<!-- \\r\\n    Assinged to Kishan\\r\\n -->\\r\\n<div class=\\\"container-fluid\\\">\\r\\n    <!-- Navigation bar for the web application -->\\r\\n    <nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\r\\n        <a class=\\\"navbar-brand\\\">DRMS</a>\\r\\n        <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarNav\\\" aria-controls=\\\"navbarNav\\\" aria-expanded=\\\"false\\\"\\r\\n            aria-label=\\\"Toggle navigation\\\"> \\r\\n            <span class=\\\"navbar-toggler-icon\\\"></span></button>\\r\\n            <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNav\\\">\\r\\n                <ul class=\\\"navbar-nav\\\">\\r\\n                    <li class=\\\"nav-item\\\">\\r\\n                        <a class=\\\"nav-link\\\" routerLink=\\\"/dashboard\\\">Dashboard</a>\\r\\n                    </li>\\r\\n                    <li class=\\\"nav-item\\\">\\r\\n                        <a class=\\\"nav-link\\\" routerLink=\\\"/reviewApplication\\\">Review Applications</a>\\r\\n                    </li>\\r\\n                    <!-- <li class=\\\"nav-item\\\">\\r\\n                        <a class=\\\"nav-link\\\" routerLink=\\\"/teams\\\">Teams</a>\\r\\n                    </li> -->\\r\\n                    <li class=\\\"nav-item\\\">\\r\\n                        <a class=\\\"nav-link\\\" routerLink=\\\"\\\">Logout</a>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n    </nav>\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\nimport { CreateIncidentComponent } from './create-incident/create-incident.component';\r\nimport { ReviewApplicationComponent } from './review-application/review-application.component';\r\nimport { TeamsComponent } from './teams/teams.component';\r\nimport { CreateTeamsComponent } from './create-teams/create-teams.component';\r\n\r\nimport { Team1DetailsComponent } from './team1-details/team1-details.component';\r\nimport {CdkTableModule} from '@angular/cdk/table'\r\n\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDatepickerModule,\r\n  MatDialogModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatGridListModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatNativeDateModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatRadioModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatStepperModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule,\r\n} from '@angular/material';\r\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport { ArchivedIncidentsComponent } from './archived-incidents/archived-incidents.component';\r\n\r\n@NgModule({\r\n  exports: [\r\n    CdkTableModule,\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n  ],\r\n  declarations: []\r\n})\r\nexport class DemoMaterialModule {}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    DashboardComponent,\r\n    CreateIncidentComponent,\r\n    ReviewApplicationComponent,\r\n    TeamsComponent,\r\n    CreateTeamsComponent,\r\n    Team1DetailsComponent,\r\n    ArchivedIncidentsComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    DemoMaterialModule,\r\n    MatNativeDateModule,\r\n    BrowserAnimationsModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"/* Assigned to kishan */\\r\\n\\r\\n.example-container {\\r\\n    display: flex;\\r\\n    /* flex-direction: column;\\r\\n    min-width: 300px; */\\r\\n  }\\r\\n\\r\\n.example-header {\\r\\n  min-height: 64px;\\r\\n  padding: 8px 24px 0;\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.mat-table {\\r\\n  overflow: auto;\\r\\n  max-height: 500px;\\r\\n}\\r\\n\\r\\n.table-header{\\r\\n  font-size: 18px;\\r\\n  color: black;\\r\\n}\\r\\n\\r\\n/* for buttons - download */\\r\\n\\r\\n.buttons {\\r\\n    font-size: 1em;\\r\\n}\\r\\n\"","module.exports = \"<!--\\r\\n  This page is to show past incidents \\r\\n  Assigned to Kishan \\r\\n-->\\r\\n<div class=\\\"container\\\">\\r\\n   <!-- Header for the Archived Incidents page -->\\r\\n  <h1>Archived Incidents</h1>\\r\\n  <hr>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n\\r\\n    <div class=\\\"example-container mat-elevation-z8\\\">\\r\\n      <div class=\\\"col-sm-3\\\">\\r\\n        <div class=\\\"example-header\\\">\\r\\n          <mat-form-field>\\r\\n            <!-- <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\"> -->\\r\\n            <!-- Picker is added to select the date from calendar -->\\r\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a start date\\\">\\r\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker touchUi=\\\"true\\\" #picker></mat-datepicker>           \\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col\\\">\\r\\n        <!-- Table contains details of the archived incidents -->\\r\\n        <mat-table #table [dataSource]=\\\"dataSource\\\">\\r\\n\\r\\n          <!--- Note that these columns can be defined in any order.\\r\\n          The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n          <!-- Incident Name Column -->\\r\\n          <ng-container matColumnDef=\\\"incidentName\\\">\\r\\n            <mat-header-cell *matHeaderCellDef class=\\\"table-header\\\"> Incident Name </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\"> {{element.incidentName }} </mat-cell>\\r\\n          </ng-container>\\r\\n\\r\\n          <!-- Location Name Column -->\\r\\n          <ng-container matColumnDef=\\\"location\\\">\\r\\n            <mat-header-cell *matHeaderCellDef class=\\\"table-header\\\"> Location </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\"> {{element.location }} </mat-cell>\\r\\n          </ng-container>\\r\\n\\r\\n          <!-- Date Column -->\\r\\n          <ng-container matColumnDef=\\\"date\\\">\\r\\n            <mat-header-cell *matHeaderCellDef class=\\\"table-header\\\"> Date </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\"> {{element.date | date }} </mat-cell>\\r\\n          </ng-container>\\r\\n\\r\\n          <!-- Time Column -->\\r\\n          <ng-container matColumnDef=\\\"time\\\">\\r\\n            <mat-header-cell *matHeaderCellDef class=\\\"table-header\\\"> Time </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\"> {{element.time }} </mat-cell>\\r\\n          </ng-container>\\r\\n\\r\\n          <!-- Description Column -->\\r\\n          <ng-container matColumnDef=\\\"description\\\">\\r\\n            <mat-header-cell *matHeaderCellDef class=\\\"table-header\\\"> Description </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\"> {{element.description }} </mat-cell>\\r\\n          </ng-container>\\r\\n\\r\\n          <!-- When clicked on any row a popup is displayed showing the details of incident -->\\r\\n          <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n          <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" (click)=\\\"rowClicked(row)\\\"></mat-row>\\r\\n        </mat-table>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n<hr>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col text-center\\\">\\r\\n      <!-- Button is provided to download the archived incidents to excel sheet -->\\r\\n    <button mat-raised-button color=\\\"primary\\\" class=\\\"buttons\\\">Download</button>\\r\\n  </div>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Incident } from '../common/incident';\r\nimport { MatTableDataSource, MatSort, MatDatepickerInputEvent } from '@angular/material';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { DataService } from '../common/dataService';\r\n\r\n@Component({\r\n  selector: 'app-archived-incidents',\r\n  templateUrl: './archived-incidents.component.html',\r\n  styleUrls: ['./archived-incidents.component.css']\r\n})\r\nexport class ArchivedIncidentsComponent implements OnInit {\r\n\r\n  incidents: Incident[];\r\n  events: string[] = []; // for date filter\r\n  displayedColumns = ['incidentName', 'location', 'date', 'time', 'description'];\r\n  dataSource: MatTableDataSource<Incident>\r\n  selection = new SelectionModel<Incident>(true, []);\r\n\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor(private dataService: DataService) { }\r\n\r\n  ngOnInit() {\r\n    this.dataService.getIncidentsList()\r\n      .subscribe((data) =>{\r\n        this.incidents = data['data'];\r\n        this.dataSource = new MatTableDataSource<Incident>(this.incidents);\r\n        // console.log(this.incidents)\r\n      });\r\n  }\r\n\r\n  addEvent(type: string, event: MatDatepickerInputEvent<Date>) {\r\n    console.log(type + \" \" + event.value);\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n\r\n}\r\n","// Assigned to Kishan\r\n\r\nexport class Applicant {\r\n\r\n    firstName:  string;\r\n    lastName: string;\r\n    email:   string;\r\n    dob: Date;\r\n    mobileNumber: string;\r\n    address1: string;\r\n    address2: string;\r\n    county: string;\r\n    city: string;\r\n    state: string;\r\n    country: string;\r\n    skills: string;\r\n    licenseNumber: string;\r\n    files: string;\r\n    limitations: string;\r\n    pushNotification: string; \r\n\r\n    constructor(values: Object = {}) {\r\n        /*Constructor initialization*/\r\n        Object.assign(this, values);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Incident } from './incident';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DataService {\r\n    constructor(private http: HttpClient) { }\r\n    getApplicantsList() {\r\n        //   http call\r\n        return this.http.get('https://drrs.herokuapp.com/getApplicantsList');\r\n    }\r\n\r\n    getIncidentsList() {\r\n        //   http call\r\n        return this.http.get('https://drrs.herokuapp.com/getIncidentsList');\r\n    }\r\n\r\n    saveIncident(data: Incident) {\r\n        // http call\r\n        return this.http.post('https://drrs.herokuapp.com/saveIncident', data);\r\n    }\r\n}\r\n\r\n","// Assigned to Kishan\r\n\r\nexport class Incident {\r\n\r\nincidentID: string;\r\n  incidentName:  string;\r\n  location: string;\r\n  date: Date;\r\n  time: string;\r\n  description: string;\r\n\r\n  constructor(values: Object = {}) {\r\n    /*Constructor initialization*/\r\n    Object.assign(this, values);\r\n}\r\n}","module.exports = \".createContainer {\\r\\n    padding-left: 30em;\\r\\n    padding-right: 29em;\\r\\n}\\r\\n\\r\\n.primary{\\r\\n    background: #673ab7;\\r\\n    color: white;\\r\\n    font-size: 1em;\\r\\n}\"","module.exports = \"<!-- \\r\\n  Assigned to Hemanth\\r\\n -->\\r\\n<div class=\\\"container\\\">\\r\\n  <!-- Header for the Create Incident page -->\\r\\n  <h1>Create Incident</h1>\\r\\n  <hr>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"createContainer\\\">\\r\\n\\r\\n  <!-- Form provided to input details for incident details -->\\r\\n  <form novalidate (ngSubmit)=\\\"onCreate(createInc)\\\" #createInc=\\\"ngForm\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"incidentName\\\">\\r\\n        <b>Incident Name</b>\\r\\n      </label>\\r\\n      <!-- Input for incident name -->\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"incident.incidentName\\\" name=\\\"incidentName\\\" #incidentName=\\\"ngModel\\\" id=\\\"inputincidentName\\\"\\r\\n        placeholder=\\\"Enter incident\\\" required>\\r\\n      <!-- \\r\\n      incident name error block \\r\\n      by Kishan\\r\\n    -->\\r\\n      <!-- Input validation for incident name-->\\r\\n      <div *ngIf=\\\"(incidentName.invalid && ( incidentName.touched || incidentName.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n        <div *ngIf=\\\"incidentName.errors?.required\\\">\\r\\n          Please enter the incident Name\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <label for=\\\"location\\\">\\r\\n        <b>Location</b>\\r\\n      </label>\\r\\n      <!-- Input field for location name -->\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"incident.location\\\" name=\\\"location\\\" location #location=\\\"ngModel\\\" id=\\\"inputlocation\\\"\\r\\n        placeholder=\\\"Enter location\\\" required>\\r\\n      <!-- \\r\\n      location error block \\r\\n      by Kishan\\r\\n    -->\\r\\n      <!-- Input validation for location -->\\r\\n      <div *ngIf=\\\"(location.invalid && ( location.touched || location.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n        <div *ngIf=\\\"location.errors?.required\\\">\\r\\n          Please enter the location\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- Select date block -->\\r\\n      <label for=\\\"date\\\">\\r\\n        <b>Date</b>\\r\\n      </label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"incident.date\\\" name=\\\"date\\\" #date=\\\"ngModel\\\" id=\\\"inputdate\\\" value=\\\"incident.date\\\"\\r\\n        disabled>\\r\\n      <!-- \\r\\n      date error block \\r\\n      by Kishan\\r\\n    -->\\r\\n      <!-- Validtion for date block -->\\r\\n      <!-- <div *ngIf=\\\"(date.invalid && ( date.touched || date.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n      <div *ngIf=\\\"date.errors?.required\\\">\\r\\n        Please enter the date\\r\\n      </div>\\r\\n    </div> -->\\r\\n\\r\\n      <!-- Select time block -->\\r\\n      <label for=\\\"time\\\">\\r\\n        <b>Time</b>\\r\\n      </label>\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"incident.time\\\" name=\\\"time\\\" #time=\\\"ngModel\\\" id=\\\"inputtime\\\" value=\\\"incident.date\\\"\\r\\n        disabled>\\r\\n      <!-- \\r\\n      time error block \\r\\n      by Kishan\\r\\n    -->\\r\\n      <!-- Validation for time block -->\\r\\n      <!-- <div *ngIf=\\\"(time.invalid && ( time.touched || time.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n      <div *ngIf=\\\"time.errors?.required\\\">\\r\\n        Please enter the time\\r\\n      </div>\\r\\n    </div> -->\\r\\n\\r\\n      <label for=\\\"description\\\">\\r\\n        <b>Description</b>\\r\\n      </label>\\r\\n      <!-- Input field for description name -->\\r\\n      <textarea type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"incident.description\\\" name=\\\"description\\\" description #description=\\\"ngModel\\\"\\r\\n        id=\\\"inputdescription\\\" placeholder=\\\"Enter description\\\" required></textarea>\\r\\n      <!-- \\r\\n        description error block \\r\\n        by Kishan\\r\\n      -->\\r\\n      <!-- Input validation for description -->\\r\\n      <div *ngIf=\\\"(description.invalid && ( description.touched || description.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n        <div *ngIf=\\\"description.errors?.required\\\">\\r\\n          Please enter the description\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Button provided to Create Incident -->\\r\\n    <button class=\\\"btn primary\\\"> Create </button>\\r\\n  </form>\\r\\n    <button class=\\\"btn btn-danger\\\" routerLink=\\\"/dashboard\\\"> Cancle </button>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Incident } from '../common/incident';\r\nimport { DataService } from '../common/dataService';\r\n\r\n@Component({\r\n  selector: 'app-create-incident',\r\n  templateUrl: './create-incident.component.html',\r\n  styleUrls: ['./create-incident.component.css']\r\n})\r\nexport class CreateIncidentComponent implements OnInit {\r\n\r\n  incident: Incident;\r\n  date = new Date;\r\n  constructor(private router: Router, private dataService: DataService) {\r\n    this.incident = new Incident({\r\n      incidentID: '',\r\n      incidentName: '',\r\n      location: '',\r\n      date: this.date,\r\n      time: this.date,\r\n      description: '',\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onCreate({ value, valid }: { value: Incident, valid: boolean }) {\r\n    // alert(\"Incident module created successfully\");\r\n    // this.router.navigate(['/dashboard']);\r\n    this.incident = value;\r\n    console.log(this.incident);\r\n    // make http req. only if form is valid\r\n    if (valid) {\r\n      this.dataService.saveIncident(this.incident)\r\n        .subscribe((data) => {\r\n          console.log(data)\r\n          console.log(\"success\")\r\n          this.router.navigate(['/dashboard'])\r\n        },\r\n          error => {\r\n            console.log(\"Error Occured\")\r\n          });\r\n    }\r\n  }\r\n}\r\n","module.exports = \".primary{\\r\\n    background: #673ab7;\\r\\n    color: white;\\r\\n    font-size: 1em;\\r\\n}\"","module.exports = \"<!-- \\r\\n  Assigned to Chandra mouli\\r\\n -->\\r\\n<!-- @Author Chandra Mouli Kantipudi -->\\r\\n<!-- Page not yet completed -->\\r\\n<div class=\\\"container\\\">\\r\\n  <!-- Header for the page -->\\r\\n  <h1>Create Team</h1>\\r\\n  <hr>\\r\\n\\r\\n  <!-- Form to input the team details -->\\r\\n  <form novalidate (ngSubmit)=\\\"onCreate(createTeam)\\\" #createTeam=\\\"ngForm\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <!-- <label for=\\\"team\\\">\\r\\n          <b>Team Name</b>\\r\\n        </label>\\r\\n        Input for team name -->\\r\\n      <!-- <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"team.teamname\\\" name=\\\"team name\\\" teamname #teamname=\\\"ngModel\\\" id=\\\"inputteamname\\\"\\r\\n          placeholder=\\\"Enter Team Name\\\" required>\\r\\n       -->\\r\\n      <!-- Validation for the team name -->\\r\\n      <!-- <div *ngIf=\\\"(incident.invalid && ( incident.touched || incident.dirty)) || isSubmitted\\\" class=\\\"col-sm-6 text-danger\\\">\\r\\n          <div *ngIf=\\\"incident.errors?.required\\\">\\r\\n            Please enter the incident\\r\\n          </div>\\r\\n        </div><br> -->\\r\\n\\r\\n      <!-- TeamID should autogenerate -->\\r\\n      <label for=\\\"teamID\\\">\\r\\n        <b>Team ID</b>\\r\\n      </label>\\r\\n      <!-- <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"team.teamID\\\" name=\\\"teamID\\\" teamID #teamID=\\\"ngModel\\\" id=\\\"teamID\\\" placeholder=\\\"Team ID\\\"\\r\\n        required><br> -->\\r\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"teamid\\\" value=\\\"team001\\\" disabled>\\r\\n    </div>\\r\\n\\r\\n    <!-- Table -->\\r\\n    <mat-table #table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n      <!--- Note that these columns can be defined in any order.\\r\\n              The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n      <!-- First Name Column -->\\r\\n      <ng-container matColumnDef=\\\"firstName\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> First Name </mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let element\\\"> {{element.firstName }} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Last Name Column -->\\r\\n      <ng-container matColumnDef=\\\"lastName\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> Last Name </mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let element\\\"> {{element.lastName }} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Email Column -->\\r\\n      <ng-container matColumnDef=\\\"email\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> Email </mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Date of Birth Column -->\\r\\n      <ng-container matColumnDef=\\\"dob\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> Date of Birth </mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let element\\\"> {{element.dob}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- County Column -->\\r\\n      <ng-container matColumnDef=\\\"county\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> County </mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let element\\\"> {{element.county}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <!-- Skills Column -->\\r\\n      <ng-container matColumnDef=\\\"skills\\\">\\r\\n        <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> skills </mat-header-cell>\\r\\n        <mat-cell *matCellDef=\\\"let element\\\"> {{element.skills}} </mat-cell>\\r\\n      </ng-container>\\r\\n\\r\\n      <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n      <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" (click)=\\\"rowClicked(row)\\\"></mat-row>\\r\\n    </mat-table>\\r\\n\\r\\n\\r\\n    <!-- Button provided to create team -->\\r\\n    <button class=\\\"btn primary\\\"> Create Team</button>\\r\\n  </form>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Applicant } from '../common/applicant';\r\nimport { MatTableDataSource } from '@angular/material';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { DataService } from '../common/dataService';\r\nimport { Team } from '../common/team';\r\n\r\n\r\n@Component({\r\n  selector: 'app-create-teams',\r\n  templateUrl: './create-teams.component.html',\r\n  styleUrls: ['./create-teams.component.css']\r\n})\r\nexport class CreateTeamsComponent implements OnInit {\r\n\r\n  // team: Team;\r\n  applicants: Applicant[];\r\n  displayedColumns = ['firstName', 'lastName', 'email', 'county', 'skills'];\r\n  dataSource = new MatTableDataSource<Applicant>(this.applicants)\r\n  selection = new SelectionModel<Applicant>(true, []);\r\n\r\n  constructor(private router: Router, private dataService: DataService) {\r\n    // this.team = new Team({\r\n    //   teamID: '',\r\n    //   // teamName: '',\r\n    //   // members: {\r\n    //   //   firstName: '',\r\n    //   //   lastName: '',\r\n    //   //   email: '',\r\n    //   //   county: '',\r\n    //   //   role: '',// drop down { leader, asst. leader, member }\r\n    //   // }\r\n    // });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.dataService.getApplicantsList()\r\n      .subscribe((data) => {\r\n        this.applicants = data['data'];\r\n        this.dataSource = new MatTableDataSource<Applicant>(this.applicants);\r\n      });\r\n  }\r\n\r\n  onCreate(createTeam) {\r\n    alert(\"Team created successfully\");\r\n    this.router.navigate(['/teams']);\r\n\r\n  }\r\n}\r\n","module.exports = \"/* Assigned to Mouli and Kishan*/\\r\\n\\r\\n/* cards */\\r\\n\\r\\n.incident-card {\\r\\n    /* max-width: 235px; */\\r\\n    width: 235px;\\r\\n    min-height: 397px;\\r\\n    margin-top: 2em;\\r\\n}\\r\\n\\r\\n/* for buttons - Create incident and Archived Incidents */\\r\\n\\r\\n.buttons {\\r\\n    font-size: 1em;\\r\\n}\\r\\n\\r\\n/* Describtion height */\\r\\n\\r\\n.p-height{\\r\\n    height: 6em;\\r\\n}\\r\\n\\r\\n.mt-archive{\\r\\n    margin-top: 0.4em;\\r\\n}\\r\\n\\r\\nmat-grid-tile {\\r\\n    background: lightblue;\\r\\n  }\"","module.exports = \"<!-- \\r\\n  Assigned to Chandra mouli\\r\\n -->\\r\\n<!-- @Author Chandra Mouli Kantipudi -->\\r\\n\\r\\n<div class=\\\"container\\\">\\r\\n  <!-- Header for the dashboard page -->\\r\\n  <h1>Dashboard</h1>\\r\\n  <hr>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col\\\">\\r\\n      <!-- Create incident button provided to route to create incident page -->\\r\\n      <button routerLink=\\\"/createIncident\\\" mat-raised-button color=\\\"primary\\\" class=\\\"buttons\\\">Create Incident</button>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col text-right\\\">\\r\\n      <!-- Archived Incidents button provided to route to Archived Incidents page -->\\r\\n      <button routerLink=\\\"/archivedIncidents\\\" mat-raised-button color=\\\"primary\\\" class=\\\"buttons\\\">Archived Incidents</button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <br>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div *ngFor=\\\"let item of incidents\\\">\\r\\n      <div class=\\\"col-4 text-center\\\">\\r\\n        <!-- The incident modules are shown using cards. Card has image of incident,\\r\\n        brief description and two buttons edit and archive -->\\r\\n        <mat-card class=\\\"incident-card\\\">\\r\\n          <a routerLink=\\\"/dashboard\\\">\\r\\n            <!-- Image of incident -->\\r\\n            <img mat-card-image src=\\\"assets/images/incidents/img.1.jpg\\\" alt=\\\"Earthquake\\\">\\r\\n          </a>\\r\\n          <mat-card-content>\\r\\n            <!-- Name of incident -->\\r\\n            <h2>{{ item.incidentName }}</h2>\\r\\n            <p class=\\\"p-height\\\">\\r\\n              <!-- Brief description of incident -->\\r\\n              {{ item.description }}\\r\\n            </p>\\r\\n          </mat-card-content>\\r\\n          <mat-card-actions>\\r\\n            <!-- Report button is provided to retrive report of the incident module-->\\r\\n            <button mat-raised-button color=\\\"primary\\\" routerLink=\\\"/#\\\">Report</button>\\r\\n            <!-- Team button is provided to view team and its members in the incident module -->\\r\\n            <button mat-raised-button color=\\\"primary\\\" routerLink=\\\"/teams\\\">Team</button>\\r\\n            <!-- Archive button is provided to archive the incident module -->\\r\\n            <div class=\\\"mt-archive\\\">\\r\\n              <button mat-raised-button color=\\\"warn\\\" routerLink=\\\"/#\\\">Archive</button>\\r\\n            </div>\\r\\n          </mat-card-actions>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../common/dataService';\r\nimport { Incident } from '../common/incident';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  incidents: Incident[];\r\n  constructor(private dataService: DataService) { }\r\n\r\n  ngOnInit() {\r\n    this.dataService.getIncidentsList()\r\n      .subscribe((data) =>{\r\n        this.incidents = data['data'];\r\n      });\r\n  }\r\n\r\n}\r\n","module.exports = \".loginContainer {\\r\\n    padding-left: 30em;\\r\\n    padding-right: 29em;\\r\\n    padding-top: 6em;\\r\\n}\\r\\n\\r\\n.primary{\\r\\n    background: #673ab7;\\r\\n    color: white;\\r\\n    font-size: 1em;\\r\\n}\"","module.exports = \"<!-- \\r\\n  Assigned to Hemanth\\r\\n -->\\r\\n <div class=\\\"loginContainer\\\">\\r\\n   <!-- Header for login page -->\\r\\n  <h1>Login </h1>\\r\\n  <!-- Form provided to input login details -->\\r\\n  <form novalidate (ngSubmit)=\\\"onLogin(loginForm)\\\" #loginForm=\\\"ngForm\\\">\\r\\n\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"email\\\">\\r\\n        <b>Email</b>\\r\\n      </label>\\r\\n      <!-- Input for emailID -->\\r\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" [ngModel]=\\\"applicant.email\\\" name=\\\"email\\\" email #email=\\\"ngModel\\\" id=\\\"inputEmail\\\" placeholder=\\\"Email\\\"\\r\\n        pattern=\\\"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,3}$\\\" required>\\r\\n      <!-- \\r\\n        Email error block \\r\\n        by kishan\\r\\n      -->\\r\\n      <!-- Validation for emailID -->\\r\\n      <div *ngIf=\\\"(email.invalid && ( email.touched || email.dirty)) || isSubmitted\\\" class=\\\"text-danger\\\">\\r\\n        <div *ngIf=\\\"email.errors?.required\\\">\\r\\n          Please enter the email id\\r\\n        </div>\\r\\n        <div *ngIf=\\\"email.errors?.pattern &&  email.dirty\\\">\\r\\n            Please enter the valid email id\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <!-- \\r\\n        Password block \\r\\n        by kishan\\r\\n      -->\\r\\n      <label for=\\\"password\\\">\\r\\n        <b>Password</b>\\r\\n      </label>\\r\\n      <!-- Input for password -->\\r\\n      <input type=\\\"password\\\" class=\\\"form-control\\\" [ngModel]=\\\"applicant.password\\\" name=\\\"password\\\" #password=\\\"ngModel\\\" id=\\\"inputpassword\\\"\\r\\n        placeholder=\\\"Password\\\" pattern=\\\"(?=^.{8,}$)((?=.*\\\\d)|(?=.*\\\\W+))(?![.\\\\n])(?=.*[A-Z])(?=.*[a-z]).*$\\\" required>\\r\\n      <!-- password error block -->\\r\\n      <!-- Validation for password -->\\r\\n      <div *ngIf=\\\"(password.invalid && ( password.touched || password.dirty)) || isSubmitted\\\" class=\\\"text-danger\\\">\\r\\n        <div *ngIf=\\\"password.errors?.required\\\">\\r\\n          Please enter the password\\r\\n        </div>\\r\\n        <!-- <div *ngIf=\\\"password.errors?.pattern && password.dirty\\\">\\r\\n          Password must have UpperCase, LowerCase, Number/SpecialChar and mininmum 8 characters.\\r\\n        </div> -->\\r\\n      </div>\\r\\n      </div>\\r\\n      <!-- Button provided to submit login details -->\\r\\n     <button class=\\\"btn primary\\\"> Login </button>\\r\\n  </form>\\r\\n  </div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Applicant } from '../common/applicant';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  // variable for applicant\r\n  applicant: Applicant;\r\n  // for validation\r\n  isSubmitted = false;\r\n\r\n  constructor(private router: Router) { \r\n    this.applicant = new Applicant({\r\n      email: ''})\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onLogin({ value, valid }: { value: Applicant, valid: boolean })  {\r\n    console.log(value)\r\n    console.log(valid)\r\n    this.isSubmitted = true;\r\n    if(value){\r\n      console.log(value);\r\n      this.router.navigate(['/dashboard']);     \r\n    } else {\r\n      console.log(\"something went wrong\");\r\n    }\r\n    \r\n  }\r\n}\r\n","module.exports = \"/* Assigned to kishan */\\r\\n\\r\\n.example-container {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    min-width: 300px;\\r\\n  }\\r\\n\\r\\n.example-header {\\r\\n  min-height: 64px;\\r\\n  padding: 8px 24px 0;\\r\\n}\\r\\n\\r\\n.mat-form-field {\\r\\n  font-size: 14px;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.mat-table {\\r\\n  overflow: auto;\\r\\n  max-height: 500px;\\r\\n}\\r\\n\\r\\n.table-header{\\r\\n  font-size: 18px;\\r\\n  color: black;\\r\\n}\"","module.exports = \"<!-- \\r\\n  Assigned to Sreevani and kishan\\r\\n -->\\r\\n<!-- <table class=\\\"userTable table-bordered\\\">\\r\\n  <tr>\\r\\n    <th>First Name</th>\\r\\n    <th>Last Name</th>\\r\\n    <th>Email</th>\\r\\n    <th>Date of Birth</th>\\r\\n    <th>Address line1</th>\\r\\n    <th>Address Line2</th>\\r\\n    <th>Country</th>\\r\\n    <th>State</th>\\r\\n    <th>City</th>\\r\\n    <th>County</th>\\r\\n    <th>Phone Number</th>\\r\\n    <th>Skills</th>\\r\\n    <th>License</th>\\r\\n    <th>Certification</th>\\r\\n    <th>File Upload</th>\\r\\n    <th>Limitations</th>\\r\\n  </tr>\\r\\n  <tr *ngFor=\\\"let applicant of applicants\\\">\\r\\n      <td> {{ applicant.firstName }} </td>\\r\\n      <td> {{ applicant.lastName }} </td>\\r\\n      <td> {{ applicant.email }} </td>\\r\\n      <td> {{ applicant.dob | date:'MM-dd-yyyy'}} </td>\\r\\n      <td> {{ applicant.address1 }} </td>\\r\\n      <td> {{ applicant.address2 }} </td>\\r\\n      <td> {{ applicant.country }} </td>\\r\\n      <td> {{ applicant.state }} </td>\\r\\n      <td> {{ applicant.city }} </td>\\r\\n      <td> {{ applicant.county }} </td>\\r\\n      <td> {{ applicant.phone }} </td>\\r\\n      <td> {{ applicant.skills }} </td>\\r\\n      <td> {{ applicant.lisence }} </td>\\r\\n      <td> {{ applicant.certification }} </td>\\r\\n      <td> {{ applicant.fileUpload }} </td>\\r\\n      <td> {{ applicant.limitations }} </td>\\r\\n  </tr>\\r\\n</table> -->\\r\\n\\r\\n<div class=\\\"container\\\">\\r\\n  <!-- Header for Review Applications -->\\r\\n<h1>Review Applications</h1>\\r\\n<hr>\\r\\n\\r\\n<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n  <div class=\\\"example-header\\\">\\r\\n    <mat-form-field>\\r\\n      <!-- Filter provided to filter the table data -->\\r\\n      <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <mat-table #table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n    <!--- Note that these columns can be defined in any order.\\r\\n          The actual rendered columns are set as a property on the row definition\\\" -->\\r\\n\\r\\n    <!-- First Name Column -->\\r\\n    <ng-container matColumnDef=\\\"firstName\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> First Name </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.firstName }} </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Last Name Column -->\\r\\n    <ng-container matColumnDef=\\\"lastName\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> Last Name </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.lastName }} </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Email Column -->\\r\\n    <ng-container matColumnDef=\\\"email\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> Email </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Date of Birth Column -->\\r\\n    <ng-container matColumnDef=\\\"dob\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> Date of Birth </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.dob}} </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- County Column -->\\r\\n    <ng-container matColumnDef=\\\"county\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> County </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.county}} </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Skills Column -->\\r\\n    <ng-container matColumnDef=\\\"skills\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header class=\\\"table-header\\\"> skills </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.skills}} </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" (click) = \\\"rowClicked(row)\\\"></mat-row>\\r\\n  </mat-table>\\r\\n  <!-- <mat-paginator #paginator [pageSize]=\\\"5\\\" [pageSizeOptions]=\\\"[5, 10, 20]\\\" [showFirstLastButtons]=\\\"true\\\">\\r\\n  </mat-paginator> -->\\r\\n</div>\\r\\n</div>\"","// Assigned to Kishan\r\n\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\n// import { applicant } from '../common/mock-applicants'; // for mock user\r\nimport {MatPaginator, MatTableDataSource, MatSort} from '@angular/material';\r\nimport { Applicant } from '../common/applicant';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { DataService } from '../common/dataService';\r\n\r\n@Component({\r\n  selector: 'app-review-application',\r\n  templateUrl: './review-application.component.html',\r\n  styleUrls: ['./review-application.component.css']\r\n})\r\nexport class ReviewApplicationComponent implements OnInit {\r\n\r\n  applicants: Applicant[];\r\n  displayedColumns = ['firstName', 'lastName', 'email', 'county', 'skills'];\r\n  dataSource = new  MatTableDataSource<Applicant>(this.applicants)\r\n  selection = new SelectionModel<Applicant>(true, []);\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;  \r\n  \r\n  \r\n  constructor(private dataService: DataService) { }\r\n\r\n  ngOnInit() {\r\n    this.dataService.getApplicantsList()\r\n      .subscribe((data) =>{\r\n        this.applicants = data['data'];\r\n        this.dataSource = new MatTableDataSource<Applicant>(this.applicants);\r\n      });\r\n\r\n  }\r\n\r\n  \r\n  ngAfterViewInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n\r\n  rowClicked(row: any): void {\r\n    console.log(row);\r\n    confirm(\"First Name: \" + row.firstName +\"\\n\"+\r\n            \"Last Name: \" + row.lastName +\"\\n\"+\r\n            \"County: \" + row.county +\"\\n\"+\r\n            \"Phone Number: \" + row.skills\r\n  );\r\n  }\r\n}\r\n","module.exports = \"\"","module.exports = \"<!-- \\r\\n  Assigned to Chandra Mouli\\r\\n -->\\r\\n <!-- @Author Chandra Mouli Kantipudi -->\\r\\n <!-- Header for team details page -->\\r\\n <h1>Team1 Members</h1><br>\\r\\n <!-- Table is provide with the team members details -->\\r\\n<table class=\\\"userTable table-bordered\\\">\\r\\n  <tr>\\r\\n    <th>First Name</th>\\r\\n    <th>Last Name</th>\\r\\n    <th>Email</th>\\r\\n    <th>Date of Birth</th>\\r\\n    <th>City</th>\\r\\n    <th>Phone Number</th>\\r\\n    <th>Skills</th>\\r\\n  </tr>\\r\\n  <tr *ngFor=\\\"let applicant of applicants\\\">\\r\\n    <td> {{ applicant.firstName }} </td>\\r\\n    <td> {{ applicant.lastName }} </td>\\r\\n    <td> {{ applicant.email }} </td>\\r\\n    <td> {{ applicant.dob | date:'MM-dd-yyyy'}} </td>\\r\\n    <td> {{ applicant.city }} </td>\\r\\n    <td> {{ applicant.phone }} </td>\\r\\n    <td> {{ applicant.skills }} </td>\\r\\n  </tr>\\r\\n</table>\"","import { Component, OnInit } from '@angular/core';\r\n// import { applicant } from '../common/mock-applicants';\r\n\r\n@Component({\r\n  selector: 'app-team1-details',\r\n  templateUrl: './team1-details.component.html',\r\n  styleUrls: ['./team1-details.component.css']\r\n})\r\nexport class Team1DetailsComponent implements OnInit {\r\n\r\n  // applicants = applicant;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \".example-card {\\r\\n    max-width: 235px;\\r\\n  }\\r\\n  \\r\\n  \"","module.exports = \"<!-- \\r\\n  Assigned to Chandra Mouli\\r\\n -->\\r\\n <!-- @Author Chandra Mouli Kantipudi -->\\r\\n <div class=\\\"container\\\">\\r\\n    <!-- Header for the dashboard page -->\\r\\n <h1>Teams</h1>\\r\\n <hr>\\r\\n <!-- Create team button provided to route to create team page -->\\r\\n <button routerLink = \\\"/createTeams\\\" mat-raised-button color = \\\"primary\\\">Create Team</button>\\r\\n <br><br>\\r\\n <!-- The team modules are shown using cards. Card has image of team and team name -->\\r\\n <mat-card class=\\\"example-card\\\" >\\r\\n    <!-- Image for team is provided when clicked on image it redirects to the team page -->\\r\\n   <a routerLink = \\\"/team1Details\\\">\\r\\n   <img mat-card-image src=\\\"assets/images/teams/img1.jpg\\\" alt=\\\"Team1\\\"></a>\\r\\n   <mat-card-content >\\r\\n     <!-- Team name -->\\r\\n     <h2>Team 1</h2>\\r\\n   </mat-card-content>\\r\\n </mat-card>\\r\\n </div>\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-teams',\r\n  templateUrl: './teams.component.html',\r\n  styleUrls: ['./teams.component.css']\r\n})\r\nexport class TeamsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * In development mode, to ignore zone related error stack frames such as\r\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\r\n * import the following file, but please comment it out in production mode\r\n * because it will have performance impact when throw error\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.log(err));\r\n"],"sourceRoot":""}